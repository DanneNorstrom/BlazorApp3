@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Data
@using BlazorApp3.Models

@rendermode InteractiveServer

@implements IAsyncDisposable
@inject IDbContextFactory<StorageContext> DbFactory
@inject NavigationManager NavigationManager



<PageTitle>Machines</PageTitle>

<h5><b>Machines</b></h5>

<a href="/add">Add machine</a>

<p></p>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Status</th>
            <th>Data from</th>
            <th>On/Off</th>
            <th>Data to</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var machine in machines)
        {
            <tr>
                <td>@machine.Id</td>
                <td>@machine.Name</td>
                <td>@machine.Status</td>
                <td>@machine.Datafrom</td>
                <td><button class="btn btn-primary" @onclick="() => OnOff(machine.Id)">Power</button></td>
                <td><a href="/send/@machine.Id">Send</a></td>
                <td><a href="/remove/@machine.Id">Remove</a></td>
            </tr>
        }
    </tbody>
</table>

@code {

    private StorageContext context = default!;
    private List<Machine> machines = new List<Machine>();


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        machines = await context.Machine.ToListAsync();
    }

    private async Task OnOff(int id)
    {
        var m = await context.Machine.FindAsync(id);
        if (m.Status == "offline") m.Status = "online";
        else m.Status = "offline";
        context.Machine.Update(m);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/");
    }

    /*private async Task Remove(int id)
    {
        var m = await context.Machine.FindAsync(id);
        context.Machine.Remove(m);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/");
    }*/

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}